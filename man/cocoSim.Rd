% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cocoSim.R
\name{cocoSim}
\alias{cocoSim}
\title{Simulation of time series data}
\usage{
cocoSim(
  type,
  order,
  par,
  length,
  xreg = NULL,
  seasonality = c(1, 2),
  init = NULL,
  julia = FALSE,
  julia_seed = NULL
)
}
\arguments{
\item{type}{character, either "Poisson" or "GP" indicating the type of the innovation distribution}

\item{order}{integer, either 1 or 2 indicating the order of the model}

\item{par}{numeric vector, the parameters of the model, the number of elements in the vector depends on the type and order specified}

\item{length}{integer, the number of observations in the generated time series}

\item{xreg}{data.frame, data frame of control variables}

\item{seasonality}{integer vector, the range of seasonality, default is c(1,2)}

\item{init}{numeric vector, initial data to use, default is NULL}

\item{julia}{If TRUE, the julia implementation is used. In this case, seasonality and init are ignored but it might be faster.}

\item{julia_seed}{Seed for the julia implementation. Only used if julia equals TRUE.}
}
\value{
list containing 'time' and 'data' which are the computation time and generated time series respectively
}
\description{
The cocoSim_base function generates a time series of a specified innovation distribution, size, order, and parameters. It also allows for the option of specifying the seasonality range and an initial set of data. 
The function checks for valid input of the type, order, parameters, seasonality, and initial data before generating the time series.
}
\examples{
lambda <- 1
alpha <- 0.4
set.seed(12345)

# Simulate using the RCPP implementation
data_rcpp <- cocoSim(order = 1, type = "Poisson", par = c(lambda, alpha), length = 100)
# Simulate using the Julia implementation
data_julia <- cocoSim(order = 1, type = "Poisson", par = c(lambda, alpha), length = 100)
}
\author{
Manuel Huth
}
